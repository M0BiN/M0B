{"version":3,"sources":["assets/vahshi.png","component/sourceAppbar/appbar.component.jsx","component/token-table/token-table.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Appbar","label","classes","useStyles","Grid","item","xs","Paper","className","paper","Typography","style","fontFamily","color","variant","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","padding","textAlign","background","borderRadius","table","minWidth","SimpleTable","data","rows","map","v","i","num","value","type","getType","group","row","TableContainer","component","maxHeight","Table","size","stickyHeader","TableHead","TableRow","StyledTableCell","align","TableBody","key","TableCell","withStyles","head","backgroundColor","palette","common","black","white","body","fontSize","default","App","React","useState","initialInput","input","setInput","container","height","float","src","Vahshiimg","alt","justify","TextareaAutosize","width","aria-label","rowsMin","placeholder","onChange","e","target","getTokens","regex","tokens","match","exec","index","groupName","m","some","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,oC,kOCsB5BC,EAhBA,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACPC,EAAUC,IAChB,OACI,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACX,kBAACC,EAAA,EAAD,CAAOC,UAAWN,EAAQO,OACtB,kBAACC,EAAA,EAAD,CACIC,MAAO,CAAEC,WAAY,aAAcC,MAAO,QAC1CC,QAAQ,WAEPb,MASfE,EAAYY,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAaJ,EAAMK,QAAQ,IAE/BC,MAAO,CACHJ,SAAU,GAEdT,MAAO,CACHc,QAASP,EAAMK,QAAQ,GACvBG,UAAW,OACXC,WAAY,UACZC,aAAa,S,uDC5BfvB,EAAYY,YAAW,CACzBY,MAAO,CACHC,SAAU,OAYH,SAASC,EAAT,GAAgC,IAATC,EAAQ,EAARA,KAC5B5B,EAAUC,IACV4B,EAAOD,EAAKE,KAAI,SAACC,EAAGC,GAAJ,OARNC,EAQ2B,IAAD,OAAKD,EAAI,GAR9BE,EAQmCH,EAAEG,MAR9BC,EAQqCC,EAAQL,EAAEM,OARzCC,EAQiDP,EAAEO,IAP9E,CAAEL,MAAKC,QAAOC,OAAMG,OAD/B,IAAoBL,EAAKC,EAAOC,EAAMG,KAgBlC,OACI,kBAACC,EAAA,EAAD,CAAgBC,UAAWnC,IAAOI,MAAO,CAAEgC,UAAW,UAClD,kBAACC,EAAA,EAAD,CAAOpC,UAAWN,EAAQyB,MAAOkB,KAAK,QAAQC,cAAY,GACtD,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAD,CAAiBC,MAAM,UAAvB,OACA,kBAACD,EAAD,CAAiBC,MAAM,UAAvB,SACA,kBAACD,EAAD,CAAiBC,MAAM,UAAvB,QACA,kBAACD,EAAD,CAAiBC,MAAM,UAAvB,SAGR,kBAACC,EAAA,EAAD,KACKpB,EAAKC,KAAI,SAACQ,GAAD,OACN,kBAACQ,EAAA,EAAD,CAAUI,IAAKZ,EAAIL,KACf,kBAACkB,EAAA,EAAD,CAAWH,MAAM,UACZV,EAAIL,KAGT,kBAACkB,EAAA,EAAD,CAAWH,MAAM,UAAUV,EAAIJ,OAC/B,kBAACiB,EAAA,EAAD,CAAWH,MAAM,UAAUV,EAAIH,MAC/B,kBAACgB,EAAA,EAAD,CAAWH,MAAM,UAAUV,EAAIA,YAW3D,IAAIF,EAAU,CAAC,GAAI,GAAI,WAAY,SAAU,SAAU,WAAY,sBAAuB,SAAU,SAAU,kBAAmB,kBAAmB,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAYhNW,EAAkBK,aAAW,SAACtC,GAAD,MAAY,CAC3CuC,KAAM,CACJC,gBAAiBxC,EAAMyC,QAAQC,OAAOC,MACtC9C,MAAOG,EAAMyC,QAAQC,OAAOE,OAE9BC,KAAM,CACJC,SAAU,OANQR,CAQlBD,K,GAEmBC,aAAW,SAACtC,GAAD,MAAY,CAC5CC,KAAM,CACJ,qBAAsB,CACpBuC,gBAAiBxC,EAAMyC,QAAQhC,WAAWsC,aAHzBT,CAMnBN,K,gBCfSgB,MApEf,WACE,IAAM9D,EAAUC,IADH,EAEa8D,IAAMC,SAASC,GAF5B,mBAENC,EAFM,KAECC,EAFD,KAKb,OACE,yBAAK7D,UAAWN,EAAQe,MACtB,kBAACb,EAAA,EAAD,CAAMkE,WAAS,GACb,kBAAClE,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACb,kBAACC,EAAA,EAAD,CAAOC,UAAWN,EAAQO,OAC1B,kBAACL,EAAA,EAAD,CAAMkE,WAAS,GACf,kBAAClE,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACf,kBAACI,EAAA,EAAD,CACIC,MAAO,CAAEC,WAAY,aAAcC,MAAO,SAC1CC,QAAQ,MAFZ,yBAOE,kBAACV,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACf,kBAACF,EAAA,EAAD,CAAMC,MAAI,GACV,yBAAKM,MAAO,CAAC4D,OAAO,OAAOC,MAAM,SAAUC,IAAKC,IAAWC,IAAI,gBASnE,kBAACvE,EAAA,EAAD,CAAMkE,WAAS,EAACjD,QAAQ,IAAIuD,QAAQ,UAClC,kBAACxE,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACb,kBAAC,EAAD,CAAQL,MAAO,gBACf,kBAAC4E,EAAA,EAAD,CACElE,MAAO,CAAEmE,MAAO,OAAOlD,SAAS,OAAOhB,WAAW,SAClDmE,aAAW,iBACXC,QAAS,GACTC,YAAY,eACZ7C,MAAOgC,EACPc,SApCc,SAACC,GAAD,OAAOd,EAASc,EAAEC,OAAOhD,WAuC3C,kBAAChC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,KAUjB,kBAACF,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACb,kBAACF,EAAA,EAAD,CAAMkE,WAAS,GACf,kBAAClE,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACf,kBAAC,EAAD,CAAQL,MAAO,gBACf,kBAAC,EAAD,CAAO6B,KAAMuD,EAAUjB,MAErB,kBAAChE,EAAA,EAAD,CAAMC,MAAI,SAYhBgF,EAAY,SAACjB,GAGjB,IAFA,IAAMkB,EAAQ,8IACVC,EAAS,GACJC,EAAQF,EAAMG,KAAKrB,GAAQoB,EAAOA,EAAQF,EAAMG,KAAKrB,GAC5DmB,EAAM,sBAAOA,GAAP,CAAc,CAAEnD,MAAOoD,EAAM,GAAIhD,IAAKgD,EAAME,MAAOnD,MAAOoD,EAAUH,MAC5E,OAAOD,GAIHpF,EAAYY,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZT,MAAO,CACLc,QAASP,EAAMK,QAAQ,GACvBG,UAAW,OACXC,WAAY,eAIVkE,EAAY,SAACC,GACjB,IAAIrD,EAQJ,OAPAqD,EAAEC,MAAK,SAACV,EAAGjD,GAIT,OAHIiD,GAAKjD,EAAI,IACXK,EAAQL,GAEHK,KAGFA,GAEH4B,EAAY,4GCnGE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAST,MACvB,2DCZNU,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fa938931.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vahshi.db9f7ac9.png\";","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst Appbar = ({label}) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Paper className={classes.paper}>\r\n                <Typography\r\n                    style={{ fontFamily: \"Lilita One\", color: \"dark\" }}\r\n                    variant=\"caption\"\r\n                >\r\n                    {label}\r\n            </Typography>\r\n            </Paper>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Appbar;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(1),\r\n        textAlign: \"left\",\r\n        background: \"#fafafa\",\r\n        borderRadius:'0',\r\n      },\r\n}));","import React from 'react';\r\nimport { makeStyles,withStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 650,\r\n\r\n    },\r\n\r\n});\r\n\r\nfunction createData(num, value, type, row, ) {\r\n    return { num, value, type, row, };\r\n}\r\n\r\n\r\n\r\nexport default function SimpleTable({ data }) {\r\n    const classes = useStyles();\r\n    const rows = data.map((v, i) => createData(`#${i + 1}`, v.value, getType[v.group], v.row));\r\n    //   const rows = [\r\n    //     createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n    //     createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n    //     createData('Eclair', 262, 16.0, 24, 6.0),\r\n    //     createData('Cupcake', 305, 3.7, 67, 4.3),\r\n    //     createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n    //   ];\r\n    return (\r\n        <TableContainer component={Paper} style={{ maxHeight: '400px' }} >\r\n            <Table className={classes.table} size=\"small\" stickyHeader>\r\n                <TableHead >\r\n                    <TableRow >\r\n                        <StyledTableCell align=\"center\" >Num</StyledTableCell>\r\n                        <StyledTableCell align=\"center\" >Value</StyledTableCell>\r\n                        <StyledTableCell align=\"center\">Type</StyledTableCell>\r\n                        <StyledTableCell align=\"center\">Pos</StyledTableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {rows.map((row) => (\r\n                        <TableRow key={row.num}>\r\n                            <TableCell align=\"center\">\r\n                                {row.num}\r\n                            </TableCell>\r\n\r\n                            <TableCell align=\"center\">{row.value}</TableCell>\r\n                            <TableCell align=\"center\">{row.type}</TableCell>\r\n                            <TableCell align=\"center\">{row.row}</TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n\r\n\r\n\r\nlet getType = ['', '', 'Variable', 'String', 'Number', 'Operator', 'Statement_Separator', 'Lparen', 'Rparen', 'Start_Statement', 'Close_Statement', 'Keyword', 'Keyword', 'Keyword', 'Keyword', 'Keyword', 'Keyword', 'Keyword'];\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  }))(TableCell);\r\n  \r\n  const StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n      '&:nth-of-type(odd)': {\r\n        backgroundColor: theme.palette.background.default,\r\n      },\r\n    },\r\n  }))(TableRow);\r\n  ","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport \"./App.css\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport Appbar from \"./component/sourceAppbar/appbar.component\";\nimport Table from \"./component/token-table/token-table.component\";\nimport Vahshiimg from './assets/vahshi.png';\nfunction App() {\n  const classes = useStyles();\n  const [input, setInput] = React.useState(initialInput);\n  const handleInputChange = (e) => setInput(e.target.value);\n  \n  return (\n    <div className={classes.root}>\n      <Grid container>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>\n          <Grid container > \n          <Grid item xs={6}>\n          <Typography\n              style={{ fontFamily: \"Lilita One\", color: \"white\" }}\n              variant=\"h4\"\n            >\n              VahshiBafghi 1.0.0.1\n            </Typography>\n            </Grid>\n            <Grid item xs={6} >\n            <Grid item>\n            <img style={{height:'60px',float:'right'}} src={Vahshiimg} alt='Vahshi'/>\n            </Grid>\n            \n            \n            \n            </Grid>\n            </Grid>\n          </Paper>\n        </Grid>\n        <Grid container spacing=\"4\" justify=\"center\">\n          <Grid item xs={6}>\n            <Appbar label={\"Source File\"} />\n            <TextareaAutosize\n              style={{ width: \"100%\",minWidth:'100%',fontFamily:'Arimo' }}\n              aria-label=\"minimum height\"\n              rowsMin={10}\n              placeholder=\"Type here...\"\n              value={input}\n              onChange={handleInputChange}\n            />\n          </Grid>\n          <Grid item xs={6}>\n            {/* <Appbar label={\"Output\"} />\n            <TextareaAutosize\n              style={{ width: \"100%\" }}\n              aria-label=\"minimum height\"\n              rowsMin={10}\n              placeholder=\"Type here...\"\n            /> */}\n          </Grid>\n        </Grid>\n        <Grid item xs={6}>\n          <Grid container>\n          <Grid item xs={12} >\n          <Appbar label={\"Token Table\"} />\n          <Table data={getTokens(input)} />\n          </Grid>\n            <Grid item>\n              \n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n\nconst getTokens = (input) => {\n  const regex = /(((?:@[a-zA-Z]\\w*)\\b)|(\"[^\"]*\")|((?:\\b(?:\\d+(?:\\.\\d+)?)\\b))|([\\-+\\/*%=])|(#)|(\\()|(\\))|(<<)|(>>)|(as)|(ifn)|(loop)|(on)|(by)|(say)|(get))/gi;\n  let tokens = [];\n  for (let match = regex.exec(input); match; match = regex.exec(input)) \n    tokens = [...tokens,{ value: match[0], row: match.index, group: groupName(match) },];\n  return tokens;\n\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"left\",\n    background: \"#607d8b\",\n  },\n}));\n\nconst groupName = (m) => {\n  let group;\n  m.some((e, i) => {\n    if (e && i > 1) {\n      group = i;\n    }\n    return group;\n  });\n\n  return group;\n};\nconst initialInput = `@age = 20#\nas(@age >: 20)<<\nsay \"You are too old.\"#\n>>\nifn(@age < 20 )<<\n\tsay \"Young dude\"#\n>>\n\n`;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}